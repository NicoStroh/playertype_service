plugins {
    id 'java'
    id 'org.springframework.boot' version '3.+'
    id 'io.spring.dependency-management' version '1.+'
    id "io.github.kobylynskyi.graphql.codegen" version "5.+"
    id "org.sonarqube" version "5.+"
    id "jacoco"

}

group = 'de.unistuttgart.iste.meitrex'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

def jacocoEnabled = System.properties.getProperty("jacocoEnabled") ?: "true"

// Apply JaCoCo settings only if jacaco is enable
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco settings from jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}

sonarqube {
    properties {
        property("sonar.projectKey", "MEITREX_")
        property("sonar.organization", "meitrex")
        property("sonar.host.url", "https://sonarcloud.io")
    }
}


def fetchFilesFromRepo(String repository, List<String> files) {
    def baseurl = "https://raw.githubusercontent.com/MEITREX/"
    def fileUrl = "${baseurl}${repository}/main/src/main/resources/graphql/"
    def outputDir = "src/main/resources/graphql"

    files.each { file ->
        tasks.register("fetchExternalSchema-${file.capitalize()}", Exec) {
            commandLine 'curl', "${fileUrl}${file}", '-o', "${outputDir}/${repository}/${file}"
        }
    }
}

fetchFilesFromRepo("common", ["directives.graphqls", "scalars.graphqls", "sortFilterPagination.graphqls"])

// run this task to fetch the latest schema files from the external github repositories
tasks.register("fetchAllExternalSchemas", Task) {
    dependsOn tasks.matching { it.name.startsWith("fetchExternalSchema-") }
}

// Automatically generate DTOs from GraphQL schema:
graphqlCodegen {
    // all config options:
    // https://github.com/kobylynskyi/graphql-java-codegen/blob/main/docs/codegen-options.md
    graphqlSchemas {
        rootDir = file("src/main/resources/graphql/service")
    }
    outputDir = new File("$buildDir/generated")
    packageName = "de.unistuttgart.iste.meitrex.generated.dto"
    generatedAnnotation = "jakarta.annotation.Generated"
    modelValidationAnnotation = "jakarta.validation.constraints.NotNull"
    generateApis = false // set to false as the generator does not support spring boot graphQL
    customTypesMapping = [
            "DateTime" : "java.time.OffsetDateTime",
            "Date"     : "java.time.LocalDate",
            "Time"     : "java.time.OffsetTime",
            "LocalTime": "java.time.LocalTime",
            "UUID"     : "java.util.UUID",
            "Url"      : "java.net.URL",
    ]
    generateEqualsAndHashCode = true
    generateToString = true
    fieldsWithResolvers = ["@OnDemand"]
}

tasks.register('generateApiDocs', Exec) {
    commandLine 'cmd', '/c', 'generate_api_doc.bat'
}

tasks.named('assemble') {
    finalizedBy('generateApiDocs')
}

// Automatically generate GraphQL code on project build:
compileJava.dependsOn 'graphqlCodegen'

// Add generated sources to your project source sets:
sourceSets.main.java.srcDir "$buildDir/generated"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'de.unistuttgart.iste.meitrex:meitrex-common:1.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.modelmapper:modelmapper:3.+'
    implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'
    implementation 'com.graphql-java:graphql-java-extended-validation:22.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'de.unistuttgart.iste.meitrex:meitrex-common-test:1.0.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation "org.mockito:mockito-core:5.+"
    testImplementation 'org.hamcrest:hamcrest:2.+'
    testImplementation "org.testcontainers:postgresql:1.+"
    testImplementation "org.testcontainers:junit-jupiter:1.+"
}

tasks.named('test') {
    useJUnitPlatform()
}

